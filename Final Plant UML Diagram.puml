@startuml

skinparam legendBorderThickness 0
skinparam legendBackgroundColor White
skinparam legendFontSize 18
skinparam legendPadding 8

legend top left

**Legend**

| **Symbol**                     |   | **Description**              |
|                                |   |                             |
| //methodName()//               |   | Abstract Method             |
| __methodName()__               |   | Static Method               |
| <img:https://cdn-0.plantuml.com/package-private-field.png> fieldName    |   | Private Field             |
| <img:https://cdn-0.plantuml.com/private-method.png> methodName()        |   | Private Method            |
| <img:https://cdn-0.plantuml.com/protected-field.png> fieldName          |   | Protected Field           |
| <img:https://cdn-0.plantuml.com/protected-method.png> methodName()      |   | Protected Method          |
| <img:https://cdn-0.plantuml.com/public-field.png> fieldName             |   | Public Field              |
| <img:https://cdn-0.plantuml.com/public-method.png> methodName()         |   | Public Method             |

**John Holloway**
**CPSC 2720 Fall 2024**

end legend

' BaseAnimal class
class BaseAnimal {
    # string name_ : string
    # string breed_ : string
    # birthYear_ : int
    + getBirthYear() const: int
    + string getBreed() : const string&
    + string getName() : const string&
    {abstract} getColour(): const string

}

' Mammal class (templated)
class Mammal<T> {
    # Mammal(string name, string breed, int birthYear)
    + getColour() : string
    + getMarking() : string
}

BaseAnimal <|-- Mammal

' Cat class
class Cat {
    {static}  colourToString(Colour colour) : string
    {static} markingToString(Marking marking) : string
    -Colour colour_
    -Marking marking_

    + enum Colour { Black, Chocolate, Gray, Cream, Cinnamon, Red }
    + enum Marking { Brindle, Spotted, Tortoise, Calico, Striped, Tabby }

    + Cat(string name, string breed, int birthYear, Colour colour, Marking marking)
}

Mammal <|-- Cat

' Dog class
class Dog {
    {static} colourToString(Colour colour) : string
    {static} markingToString(Marking marking) : string

    + enum Colour { Black, Chocolate, Gray, Gold, White, Yellow }
    + enum Marking { Brindle, Spotted, TwoColour, Merle, Tricolour, Tudexo }
    -Colour colour_
    -Marking marking_

    + Dog(string name, string breed, int birthYear, Colour colour, Marking marking)
}

Mammal <|-- Dog

' Rabbit class
class Rabbit {
    {static} colourToString(Colour colour) : string
    {static} markingToString(Marking marking) : string

    + enum Colour { Black, Brown, Gray, White }
    + enum Marking { Solid, Spotted, Patches }
    -Colour colour_
    -Marking marking_

    + Rabbit(string name, string breed, int birthYear, Colour colour, Marking marking)
}

Mammal <|-- Rabbit

' Reptile class (templated)
class Reptile<T> {
    # {static} orderToString(Order order) : string

    + enum Order { Testudines, Crocodilians, Squamata, Rhynchocephalia }
    # Order order_

    # Reptile(string name, string breed, int birthYear, Order order)
    + getOrder() : string
    + getColour() : string
    + getPattern() : string
}

BaseAnimal <|-- Reptile

' Snake class
class Snake {
      {static} colourToString(Colour colour) : string
      {static} patternToString(Pattern pattern) : string



    + enum Colour { Green, Brown, Gray, Onyx, Cinnamon, Red }
    + enum Pattern { Striped, Reticulated, Solid, Checkerboard, Motted }
    -Colour colour_
    -Pattern pattern_
    +Snake(string name, string breed, int birthYear, Reptile::Order order, Colour colour, Pattern pattern)
}

Reptile <|-- Snake

' Client class
class Client {
    - int phoneNumber
    - string name
    - unordered_map<string, unique_ptr<BaseAnimal>> animalsByName
    + Client(string name, int phoneNumber)
    + addAnimal(unique_ptr<BaseAnimal> animal) : void
    + getAnimal(const string& name): BaseAnimal&
    + string getName() : string
    + getPhoneNumber() : int
}

' Clients class
class Clients {
    - unordered_map<int, std::unique_ptr<Client>> clientsByPhoneNumber
    + addClient(std::unique_ptr<Client> client) : void
    + getClient(int phoneNumber) : Client&
    + findClient(Client*) : Client&
}


Clients "1" *-- "many" Client
Client "1" *-- "many" BaseAnimal



@enduml
